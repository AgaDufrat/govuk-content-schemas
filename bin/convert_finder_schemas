#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__) + "/../lib"
require 'govuk_content_schemas/finder_schema_converter'
require 'json'

def usage
  $stderr.puts "USAGE: #{File.basename(__FILE__)} <finder_schema_1.json ... finder_schema_n.json>"
  $stderr.puts ""
  $stderr.puts "for further documentation please see docs/converting-finder-schemas.md"
end

if ARGV.empty?
  usage
  exit(1)
end

# When there is an edge-case with document type naming, add it to the MAPPING hash.
# Otherwise implicit mapping will occur from the
# finder schema file [some-name]s.json to a document type [some_name].
class DocumentTypeMapper
  MAPPING = {
    "esi-funds.json" => "european_structural_investment_fund",
    "vehicle-recalls-and-faults-alert.json" => "vehicle_recalls_and_faults_alert"
  }

  def call(filename)
    file_name = File.basename(filename)
    begin
      MAPPING.fetch(file_name)
    rescue Exception => e
      document_type = file_name.chomp('s.json').gsub('-','_')
      STDERR.puts "Implicitly mapping #{file_name} to '#{document_type}' document type."
      STDERR.puts "To override #{file_name} mapping, edit DocumentTypeMapper::MAPPING."
      MAPPING[file_name] = document_type
      document_type
    end
  end
end

# There is also no way to identify whether a finder facet allows single or
# multiple values in the document. The only place that this information is
# encoded is in the form templates of the specialist publisher admin
# interface. Again, rather than trying to do anything clever, we'll just hard
# code it here
class SelectFieldMultiplicityIdentifier
  MULTI_SELECTS_BY_DOCUMENT_TYPE = {
    "aaib_report" => [
      "aircraft_category"
    ],
    "cma_case" => [
      "market_sector"
    ],
    "countryside_stewardship_grant" => [
      "land_use",
      "tiers_or_standalone_items",
      "funding_amount"
    ],
    "drug_safety_update" => [
      "therapeutic_area"
    ],
    "european_structural_investment_fund" => [
      "fund_type",
      "location",
      "funding_source"
    ],
    "international_development_fund" => [
      "location",
      "development_sector",
      "eligible_entities",
      "value_of_funding"
    ],
    "maib_report" => [
      "vessel_type"
    ],
    "medical_safety_alert" => [
      "medical_specialism"
    ],
    "raib_report" => [
      "railway_type"
    ]
  }

  def call(document_type, facet_name)
    MULTI_SELECTS_BY_DOCUMENT_TYPE.fetch(document_type, []).include?(facet_name)
  end
end

converter = GovukContentSchemas::FinderSchemaConverter.new(
  document_type_mapper: DocumentTypeMapper.new,
  select_field_multiplicity_identifier: SelectFieldMultiplicityIdentifier.new
)
converted = converter.call(*ARGV)

puts JSON.pretty_generate(converted)
