#!/usr/bin/env ruby

$LOAD_PATH << File.dirname(__FILE__) + "/../lib"
require 'govuk_content_schemas/schema_combiner'
require 'json-schema'
require 'json'

def usage
  $stderr.puts "USAGE: #{File.basename(__FILE__)} <path/to/publisher/schemas/> <path/to/combined-output-schema.json> <path/to/combined-output-v2-schema.json>"
end

def report_errors(path, errors)
  $stderr.puts "There were errors when reading '#{path}:"
  errors.each do |error|
    $stderr.puts error
  end
end

def format_name(source_path)
  source_path.dirname.basename.to_s
end

if ARGV.count != 2
  usage
  exit(1)
end

source_path = Pathname.new(ARGV[0])
output_path = Pathname.new(ARGV[1])
reader = JSON::Schema::Reader.new(accept_file: true, accept_uri: false)

schema_files = {
  metadata: '../../metadata',
  base_links: '../../base_links',
  details: 'details',
  links: 'links',
}

schemas = schema_files.reduce(Hash.new) do |schema_files, (name, filename)|
  path = source_path + "#{filename}.json"

  if path.exist?
    schema = reader.read(path)
    errors =  JSON::Validator.fully_validate_schema(schema.schema, parse_data: false)
    if errors.any?
      report_errors(path, errors)
      exit(1)
    end

    schema_files[name] = schema
  end

  schema_files
end

combiner = GovukContentSchemas::SchemaCombiner.new(
  schemas,
  format_name(source_path)
)

FileUtils.mkdir_p(output_path.dirname)
File.open(output_path, 'w') do |file|
  file.write JSON.pretty_generate(combiner.combined.schema)
end

v2_output_path = output_path.sub("publisher", "publisher_v2")
FileUtils.mkdir_p(v2_output_path.dirname)
File.open(v2_output_path, 'w') do |file|
  file.write JSON.pretty_generate(combiner.combined_v2.schema)
end

links_file_name = "links.json"
source_links_path = source_path + links_file_name
v2_links_output_path = v2_output_path.dirname + links_file_name
if File.exists?(source_links_path)
  File.open(v2_links_output_path, 'w') do |file|
    file.write JSON.pretty_generate(combiner.combined_v2_links.schema)
  end
end
